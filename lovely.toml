[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# Paper Mario only functionality
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if v.yes_pool_flag and not G.GAME.pool_flags[v.yes_pool_flag] then add = nil end"
position = "after"
payload = '''
if v.set == 'Joker' and not v.stage and not (v.atlas == "pm_PaperMario" or v.atlas == "pm_Koopalings"or v.atlas == "pm_Things") and pm_config and pm_config.papermario_only then add = nil end
'''
match_indent = true

# Anti Debuff (Lemmy, Frozen, and Huey) functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''
if self.ability.perishable and self.ability.perish_tally <= 0 then 
    if not self.debuff then
        self.debuff = true
        if self.area == G.jokers then self:remove_from_deck(true) end
    end
    return
end
'''
position = "after"
payload = '''

if next(SMODS.find_card('j_pm_lemmy')) and self.ability.name == "Wild Card" then should_debuff = false end
if self.config.center == G.P_CENTERS.m_pm_frozen then should_debuff = false end
if next(SMODS.find_card('j_pm_huey')) and self.base.suit == SMODS.find_card('j_pm_huey')[1].ability.extra.suit then should_debuff = false end

'''
match_indent = true

# Extra card choices functionality
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.pack_choices = self.ability.choose or self.config.center.config.choose or 1"
position = "after"
payload = '''
if next(SMODS.find_card('j_pm_bottle')) then
    local b_count = 0
    for i = 1, #G.jokers.cards do
        if string.find(G.jokers.cards[i].config.center.key, 'j_pm_bottle') then
            b_count = b_count + 1
        end
    end

    if b_count > 0 then
        G.GAME.pack_choices = G.GAME.pack_choices + b_count
        self.ability.extra = self.ability.extra + b_count
    end
end
'''
match_indent = true

# 1-UP Remove when about to lose
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = '''G.STATE = G.STATES.NEW_ROUND'''
position = "after"
payload = '''
local oneup = SMODS.find_card("c_pm_one_up")
if G.GAME.current_round.hands_left < 1 and next(oneup) and to_big(G.GAME.chips) < to_big(G.GAME.blind.chips) then
    G.STATE = G.STATES.DRAW_TO_HAND
    oneup[1]:sell_card()
end
'''
match_indent = true